#!/bin/bash
set -euxo pipefail

PROGRAM_NAME="$(:)"
VERSION="$(:)"
CONFIGFILE=$(:)

function usage {
    cat << EOF
Usage: $0 [OPTIONS] [PKGBUILD] ...

This script will build a specific AUR package in an Arch Linux container 
using a clean chroot while taking care of all the dependecies. 
If a PKGBUILD is passed to the program it will use that, otherwise it 
will look in the current directory for one.

WARNING:
Please note that it assumes you have already checked every package's PKGBUILD.

OPTIONS:
    -h, --help          display this help and exit
    -v, --version       output version information and exit
    
EOF
}

function print_dockerfile {
    cat << EOF
FROM archlinux:latest

RUN pacman -Syu --noconfirm --noprogressbar ${pkg_list[@]}

RUN reflector --protocol https --latest 5 --save /etc/pacman.d/mirrorlist
RUN sed -i '/MAKEFLAGS/c\MAKEFLAGS=\"-j\"$(nproc --all)"\"' /etc/makepkg.conf
RUN echo '%wheel ALL=(ALL) ALL' > /etc/sudoers.d/71-wheel

COPY $BUILD_SCRIPT /usr/bin/build

RUN useradd -m -G wheel -s /bin/bash  $user \
    && yes $pkg | passwd $user \
    && mkdir -p /home/$user/builds \
    && chown -R $user /home/$user/builds

COPY $pkgbuild /home/$user/builds/$(get_pkgname)

USER $user

# ENTRYPOINT  ["/usr/bin/build"]

EOF
}

function initialize {
    # download AUR package database
    if [ -e "$CACHEDIR/packages" ]; then
        rm "$CACHEDIR/packages"
    fi

    wget -q -P "$CACHEDIR" https://aur.archlinux.org/packages.gz
    gzip -q -d -c < "$CACHEDIR/packages.gz"  > "$CACHEDIR"
    AURDB="$CACHEDIR/packages"
}

function get_pkgname {
    grep "pkgname" PKGBUILD | head -n1 | cut -d"=" -f2
}

function get_pkgver {
    grep "pkgver" PKGBUILD | head -n1 | cut -d"=" -f2
}

function get_pkgrel {
    grep "pkgrel" PKGBUILD | head -n1 | cut -d"=" -f2
}

function get_arch {
    grep "arch" PKGBUILD | head -n1 | cut -d"=" -f2
}


### START ###
source "$CONFIGFILE"

# container manager check
# thanks https://github.com/89luca89/distrobox
if command -v podman > /dev/null; then
    container_manager="podman"
elif command -v docker > /dev/null; then
    container_manager="docker"
else
    echo "No container manager found, please install one (podman is recommended).\n" 1>&2
    exit 1
fi

# parse command line arguments
if [ $# -eq 0 ]; then
	usage
	exit 1
fi

while [[ "$1" ]]; do
    case $1 in
        "-h" | "--help") 
            usage
            exit 0
            ;;
        "-v" | "--version")
            echo "$PROGRAM_NAME $VERSION"
            exit 0
            ;;
        ?)
            echo "Invalid Option: -${OPTARG}" 1>&2
            usage
            exit 1
            ;;
        :)
            echo "Option -"${OPTARG}" requires an argument." 1>&2
            usage
            exit 1
            ;;
    esac

    # either it blocks here:
    # $1 unbound variable
    shift
done

pkgbuild="$(find "$(pwd)" -maxdepth 1 -name "PKGBUILD")"
while [[ "$1" ]]; do
    if [[ "$(basename "$1")" == "PKGBUILD" ]]; then
        pkgbuild="$1"
    fi

    # or loops infinitely here
    shift
done

if [ -z ${pkgbuild+x} ]; then 
    echo "PKGBUILD not found in this directory, please provide one as argument" 1>&2
    echo "or run this script in a directory containing a PKGBUILD" 1>&2
    exit 1
fi

dockerfile="$DATADIR/Dockerfile"
pkg="$(get_pkgname)-$(get_pkgver)-$(get_pkgrel)"
user="$pkg"
pkg_list=(
    'base-devel'
    'devtools'
    'namcap'
    'reflector'
)

# do shit
echo "print_dockerfile > $dockerfile "

echo "$container_manager build $(pwd)"

echo "$container_manager run -it --rm"



exit 0